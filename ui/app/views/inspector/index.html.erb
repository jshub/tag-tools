<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>Inspector</title>

    <!-- common styleguide styles -->
    <%= stylesheet_link_tag "styleguide/styleguide.css" %>
    <%= stylesheet_link_tag "styleguide/examples.css" %>
  
    <!-- YUI 3 basic grids -->
    <%= stylesheet_link_tag "inspector/yui3/reset-context.css" %>
    <%= stylesheet_link_tag "inspector/yui3/fonts-context.css" %>
    <%= stylesheet_link_tag "inspector/yui3/grids-context.css" %>
    <%= stylesheet_link_tag "inspector/yui3/base-context.css" %>
    
    <!-- YUI 2 Common -->
    <%= javascript_include_tag "inspector/yui2/utilities/utilities.js" %>
    <%= javascript_include_tag "inspector/yui2/dragdrop/dragdrop.js" %>
    
    <!-- YUI 2 Panel -->
    <%= stylesheet_link_tag "inspector/yui2/container/assets/skins/sam/container.css" %>
    <%= stylesheet_link_tag "inspector/yui2/resize/assets/skins/sam/resize.css" %>
    <%= javascript_include_tag "inspector/yui2/container/container.js" %>
    <%= javascript_include_tag "inspector/yui2/resize/resize.js" %>
    
    <!-- YUI 2 Accordion ref: http://www.i-marco.nl/weblog/yui-accordion/ -->
    <%= stylesheet_link_tag "inspector/accordionview/accordionview.css" %>
    <%= javascript_include_tag "inspector/accordionview/accordionview.js" %>
    
    <!-- jsHub Inspector -->
    <%= stylesheet_link_tag "inspector/inspector.css" %>
    <%= javascript_include_tag "inspector/inspector.js" %>
    <%= javascript_include_tag "inspector/sha1.js" %>

    <!-- jsHub Tag -->
    <%= javascript_include_tag "jquery/jquery-v1.2.6.js" %>
    <%= javascript_include_tag "json/json2.js" %>
    <%= javascript_include_tag "jshub/jshub-gromit-r2-debug.js" %>
  
</head>
<body class="jshub yui-skin-sam">

<h1>Inspector</h1>
<p>Development of the Inspector for jsHub based on YUI 2 Library and accordion widget (<%= link_to 'docs', '../docs/' %>).</p>

<h2>Floating</h2>

<div id="example1" class="yui-cssreset yui-cssfonts yui-cssgrids yui-cssbase jshub inspector yui-skin-sam example-ui">
  <div id="inspector-floating" class="state1" >
    <div class="bd">
      <ul>
        <li class="status">jsHub</li>
      </ul>
    </div>
  </div>
</div>

<script type="text/javascript">
  var inspectorFloating = new YAHOO.widget.Panel("inspector-floating", {
        draggable: false, 
        close: false, 
        constraintoviewport: true, 
        context:['example1','br','br']
      })
  inspectorFloating.render();
</script>


<h2>Minimised</h2>

<p>
<button id="setState2Sucess">Set State 2 Success</button>
<button id="setState2Error">Set State 2 Error</button>
<button id="setState2Warning">Set State 2 Warning</button>
<button id="setState2Info">Set State 2 Info</button>
</p>

<div id="example2" class="yui-cssreset yui-cssfonts yui-cssgrids yui-cssbase jshub inspector yui-skin-sam example-ui">
  <div id="inspector-minimised" class="state2" >
    <div class="hd">
<%= render 'container_header' %>   
    </div>
    <div class="bd">
<%= render 'status_large' %>
<%= render :partial => 'buttons', :locals => { :text => 'View Events' } %>
    </div>
    <div class="ft">
<%= render 'container_footer' %>   
    </div>
  </div>
</div>

<script type="text/javascript">
  var inspectorMinimised = new YAHOO.widget.Panel("inspector-minimised", {
        width: "225px",
        draggable: true, 
        close: true, 
        constraintoviewport: true
      })
  inspectorMinimised.render();
</script>

<script type="text/javascript">
// example interaction API
function setState2(state) {
  var Dom = YAHOO.util.Dom;
  
  // update the minimised example
  var statusArea = Dom.getElementsByClassName('status large', 'div', 'inspector-minimised');
  var inspectorBody = Dom.getAncestorByClassName(statusArea[0], 'bd');
  // clear the existing states
  Dom.removeClass(inspectorBody, 'info');
  Dom.removeClass(inspectorBody, 'warning');
  Dom.removeClass(inspectorBody, 'error');
  Dom.removeClass(inspectorBody, 'success');
  // add the state class to the body of the inspector for contextual CSS switching
  Dom.addClass(inspectorBody, state);

  // update the maximised example
  var statusArea = Dom.getElementsByClassName('status small', 'div', 'inspector-maximised');
  var inspectorBody = Dom.getAncestorByClassName(statusArea[0], 'bd');
  // clear the existing states
  Dom.removeClass(inspectorBody, 'info');
  Dom.removeClass(inspectorBody, 'warning');
  Dom.removeClass(inspectorBody, 'error');
  Dom.removeClass(inspectorBody, 'success');
  // add the state class to the body of the inspector for contextual CSS switching
  Dom.addClass(inspectorBody, state);
  return;
}

setState2('success');
YAHOO.util.Event.addListener("setState2Sucess", "click", function(){setState2('success')} );
YAHOO.util.Event.addListener("setState2Error", "click", function(){setState2('error')} );
YAHOO.util.Event.addListener("setState2Warning", "click", function(){setState2('warning')} );
YAHOO.util.Event.addListener("setState2Info", "click", function(){setState2('info')} );
</script>

<h2>Security</h2>

<p>Security checking of the javascript file occurs on Inspector load.</p>

<button id="checkJsFileHash">Check jshub JS file</button>

<div id="jshub-outdated">
  jsHub debug script, r2 up-to-date
  <p>
    Status icon: <span class="icon"></span>
  </p>
  <ul></ul>
</div>
    
<script>
  function checkJsFileHash() {

      var node = $('#jshub-outdated') /* where to output the vsible text */, 
          hashcode, 
          // get the url to grab the jshub code from via AJAX
          jshubURL = $("script[src~=jshub]").attr('src');
          
      $.get(jshubURL, function(jshubSrc) {
        hashcode = SHA1(jshubSrc);
        // use a locally cached copy
		// $.getJSON('http://gromit.etl.office/akita-on-rails/tag_configurations/find_by_sha1/' + hashcode + '.js?callback=?', function(data) {
        $.getJSON('<%= javascript_path "jshub/e090e895a3193594e933b9e5782e72eb29f6a3c1.js" %>', function(data) {
          
          console.log('Data from server', data);
          
          node.append("<code>" + data.toSource() + "</code>");
          var list = $('ul', node), icon = $('span.icon', node);
          if (!data.info || !data.warnings || !data.errors) {
            icon.text('Red error icon');
            list.append("<li>Unable to parse response from server</li>");
            return;
          }
          if (data.info.status === "not found") {
            icon.text("Red error icon");
            list.append("<li>Error: tag file was not found. Give a warning that it might have been tampered with.</li>");
            return;
          }
          if (data.info.status === "up to date") {
            icon.text('Green icon');
            list.append("<li>Version up to date and all ok</li>");
          } else if (data.info.status === "out of date") {
            icon.text('Yellow warning icon');
            list.append("<li>Warning, tag out of date but should work ok</li>");
          }
          if (data.warnings.tag_type === "debug") {
            icon.text('Yellow warning icon');
            list.append("<li>Warning, using debug tag. Not advised for a production site.</li>");
          }
          list.append("<li>Tag configuration name: " + data.info.name + "</li>");
          list.append("<li>Tag prepared for site: " + data.info.site + "</li>");
          list.append("<li>Tag last updated: " + $.dateFromISO8601(data.info.updated) + "</li>");
          list.append("<li>Tag configuration url: <a href='" + data.info.url + "'>" + data.info.url + "</a></li>");
          
          addRevisionStatus(2,data)
          
          
        });
      });
  }
  
YAHOO.util.Event.addListener("checkJsFileHash", "click", function(){checkJsFileHash()} );
  
</script>

<h2>Maximised</h2>

<p>
<button id="setPanel1Title">Set Panel 1 Title</button>
<button id="setPanel2Title">Set Panel 2 Title</button>
<button id="addPanel1Event">Add an Event to Panel 1</button>
<button id="addPanel2Event">Add and Event to Panel 2</button>
</p>

<div id="example3" class="yui-cssreset yui-cssfonts yui-cssgrids yui-cssbase jshub inspector yui-skin-sam example-ui">

  <div id="inspector-maximised" class="state3" >
    <div class="hd">
<%= render 'container_header' %>   
    </div>
    <div class="bd">
<%= render 'status_small' %>
<%= render 'search' %>
      <ul id="event-list">
        <li>
          <div>Page (<span class="count">0</span>)</div>
          <div>
            <div id="event-section-0" class="event-section">
              <div class="bd">
<%# Different type of event list items %>
<%= render :partial => 'event_item', :locals => { 
      :id => 'event-1',
      :variable => 'Page-view-complete',
      :vendor => 'Google Analytics',
      :value => 'True'
    } %>
<%= render :partial => 'event_item', :locals => { 
      :id => 'event-2',
      :variable => 'Page-name',
      :value => 'Homepage',
      :warning => true,
      :warnings => {
          'Google Analytics' => 'Homepage',
          'Coremetrics' => 'Home1',
          'MF - hPage' => 'Homepage1'
        }
    } %>
<%= render :partial => 'event_item', :locals => { 
      :id => 'event-3',
      :variable => 'Page-category',
      :value => 'Electrics',
      :warning => true,
      :warnings => {
          'Google Analytics' => 'Electrics',
          'Coremetrics' => 'Homeware'
        }
    } %>    
<%= render :partial => 'event_item', :locals => { 
      :id => 'event-4',
      :variable => 'Page-ref',
      :vendor => 'Coremetrics',
      :value => '123'
    } %>

              </div><!-- close module bd -->
            </div><!-- close module -->
          </div>
        </li>
        <li>
          <div>User Interactions (<span class="count">0</span>)</div>
          <div>
            <div id="event-section-1" class="event-section">
              <div class="bd">

<%= render :partial => 'event_item', :locals => { 
      :id => 'event-5',
      :variable => 'Rollover reveal',
      :vendor => 'Coremetrics',
      :value => 'Prod123',
      :help_text => "<p>Coremetrics event.</p><p>Rollover reveal <br /> This refers to ... Aenean quis enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec at justo.</p><p><a href='../docs/'>View documentation</a></p>"
    } %>
<%= render :partial => 'event_item', :locals => { 
      :id => 'event-6',
      :variable => 'DetailsClick',
      :vendor => 'Google Analytics',
      :value => '123',
      :help_text => "<p>Google Analytics event.</p><p>DetailsClick <br /> This refers to ... Aenean quis enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec at justo.</p><p><a href='../docs/'>View documentation</a></p>"
    } %>
<%= render :partial => 'event_item', :locals => { 
      :id => 'event-7',
      :variable => 'DetailsClicked',
      :vendor => 'Coremetrics',
      :value => 'Prod123',
      :help_text => "<p>Coremetrics event.</p><p>DetailsClicked <br /> This refers to ... Aenean quis enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec at justo.</p><p><a href='../docs/'>View documentation</a></p>"
    } %>

              </div><!-- close module bd -->
            </div><!-- close module -->
          </div>
        </li>

        <li>
          <div><span class="count">0</span> Tagging issues detected</div>
          <div>
            <div id="event-section-2" class="event-section">
              <div class="bd">
              </div><!-- close module bd -->
            </div><!-- close module -->
          </div>          
        </li>
        <li>
          <div>Data Sources  (<span class="count">0</span>)</div>
          <div>
            <div id="event-section-3" class="event-section">
              <div class="bd">
          <p>Maecenas mi quam, lobortis eu, feugiat ac, consequat eget, enim. Vivamus ac turpis a velit lacinia tempus. Vestibulum ac arcu. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Fusce porttitor, ligula at cursus accumsan, metus enim gravida metus, id euismod turpis nibh vitae dolor. Sed magna orci, luctus ac, commodo id, malesuada vitae, lorem. Sed mattis metus. Integer vel massa.</p>
              </div><!-- close module bd -->
            </div><!-- close module -->
          </div>          
        </li>
        <li>
          <h3>Inline content updates (1)</h3>
          <p>Donec euismod gravida purus. Suspendisse dignissim velit id lectus. Nunc ultricies pede vel orci. Fusce commodo leo vitae mi. Quisque eleifend blandit quam. Quisque eu arcu sed dolor tincidunt fermentum. Pellentesque lorem erat, pulvinar eget, pellentesque nec, cursus at, risus. Phasellus enim purus, pulvinar eget, viverra at, congue id, massa. Cras ac quam feugiat nulla luctus dapibus.</p>
        </li>  
        <li>
          <h3>Data sources (1)</h3>
          <p>Donec euismod gravida purus. Suspendisse dignissim velit id lectus. Nunc ultricies pede vel orci. Fusce commodo leo vitae mi. Quisque eleifend blandit quam. Quisque eu arcu sed dolor tincidunt fermentum. Pellentesque lorem erat, pulvinar eget, pellentesque nec, cursus at, risus. Phasellus enim purus, pulvinar eget, viverra at, congue id, massa. Cras ac quam feugiat nulla luctus dapibus.</p>
        </li>  
      </ul>
<%= render :partial => 'buttons', :locals => { :text => 'Hide Events' } %>
    </div>
    <div class="ft">
<%= render 'container_footer' %>   
    </div>
  </div>
</div>

<style type="text/css" media="screen">  
  #inspector-maximised .yui-resize-handle-br {
    right: 0;
    bottom: 0;
    height: 8px;
    width: 8px;
    position:absolute; 
  }  

  /* constrain the max height of an individual panel in the accordion so that content scrolls */
  #inspector-maximised .yui-accordion-content {
    overflow: auto;
  }
</style>

<script type="text/javascript">
	setup_inspector("inspector-maximised");
</script>

<script type="text/javascript">
// example interaction API for adding events to a panel
function getNumberOfEventsByPanel(panelNumber) {
  var Dom = YAHOO.util.Dom;
  var allEvents = Dom.getElementsByClassName('event-item', 'div', 'event-section-'+panelNumber);
  return allEvents.length;
}

function setPanelCount(panelNumber, count) {
  var Dom = YAHOO.util.Dom;
  // we have a ref to the accordion from when we init it = eventList
  var panel = Dom.get(eventList.getPanel(panelNumber));
  Dom.batch(Dom.getElementsByClassName('count', 'span', panel), function(el){el.innerHTML = count});
}

// set the title text for each panel based on the number of events inside
function updatePanelTitles(accordion) {
  var Dom = YAHOO.util.Dom;
  var allPanels = accordion.getPanels();
  for (var i = 0, j = allPanels.length; i < j; i++) {
      var count = getNumberOfEventsByPanel(i);
      console.log(count+' Events in Panel '+i);
      setPanelCount(i, count);
  }
}

// generic event
function addPanelEvent(panelNumber) {
  var Dom = YAHOO.util.Dom;
  var newEvent = new YAHOO.widget.Module(Dom.generateId(), { visible: false});
  newEvent.cfg.queueProperty("visible", true);
  
  <%# use a Ruby partial to create a template string -%>
  templateString = '<%= render :partial => 'event_item.js.erb', :locals => { 
      :id => "'+Dom.generateId()+'",
      :variable => 'DynamicEvent',
      :vendor => 'Causata',
      :value => 'content112',
      :help_text => "<p>Causata event.</p><p>DynamicEvent <br /> This refers to ... Aenean quis enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec at justo.</p><p><a href=\"../docs/\">View documentation</a></p>"
    } %>'
  
  newEvent.setBody(templateString);
  // TODO this appends when really we want to prepend
  newEvent.render('event-section-'+panelNumber);
  console.log('New Event added to Panel'+panelNumber);
  // TODO is an changeBodyEvent raised on the parent module when we add this one? This can trigger the Panel title count update
  var count = getNumberOfEventsByPanel(panelNumber);
  setPanelCount(panelNumber, count);
  console.log(count+' Events now in Panel'+panelNumber);
}

// security event
function addRevisionStatus(panelNumber, data) {
  var panelNumber = 2;
  var Dom = YAHOO.util.Dom;
	
  var StatusRenderer = function (data) {
    var header = function(text) {
      return '<div class="event-header">' + text + '</div>'
    };
    var subheader = function(type, text) {
      return '<div class="message ' + type + '"><ul><li>' + text + '</li></ul></div>';
    };
    var variable = function(name, value) {
      return '  <div class="yui-u first">' +
        '    <p class="variable">' + name + ':</p>' +
        '  </div>' +
        '  <div class="yui-u">' +
        '    <p class="value">' + value + '</p>' +
        '  </div>';
    };
	var bodyMessage = function(text) {
      return '<div class="message">' + text + '</div>';
	}
    var wrap = function(text, eventId) {
      return '<div id="' + eventId + '" class="security-item"><div class="bd">' +
        '<div class="yui-g help-text" title="Security event">' + text + '</div>' +
        '<div class="yui-g"><hr class="event-separator" /></div>' +
        '</div></div>';
    };
    var createEvent = function(html) {
	  var eventId = Dom.generateId();
      var newEvent = new YAHOO.widget.Module(eventId, {
        visible: false
      });
      newEvent.cfg.queueProperty("visible", true);
	  html = wrap(html, eventId);
      newEvent.setBody(html);
	  return newEvent;
    };
    
    var data = data;
    
    this.getWarnings = function() {
      var html, event, events = [];
	  if (data.warnings.pending_revisions) {
	  	var pending = data.warnings.pending_revisions;
        html = header("Tag out of date");
        html += subheader("warning", "Tag is " + pending + 
		  " version" + (pending > 1 ? "s":"") + " behind most recent revision");
		html += bodyMessage("You may need to update to the latest version.");
		event = createEvent(html);
		events.push(event);
      }
      if (data.warnings.tag_type) {
        html = header("Debug version detected");
        html += subheader("warning", "Using the debug version of the jsHub code");
		html += bodyMessage("You are not recommended to use this on a production website.");
		event = createEvent(html);
		events.push(event);
      }
	  return events;
    };
  };
	
//  	var html = '<div id="'+eventId+'" class="security-item"><div class="bd">' +
//	   '<div class="yui-g help-text" title="Security event">' +
//	   '  <div class="event-header">'+event.title+'</div>' +
//       (event.warning ? '  <div class="message warning">'+event.warning+'</div>' : '') +
//	   '  <div class="yui-u first">' +
//	   '    <p class="variable">Variable:</p>' + 
//	   '  </div>' +
//	   '  <div class="yui-u">' +
//	   '    <p class="value">value</p>' +
//	   '  </div>' +
//	   '</div>' + 
//	   '<div class="yui-g"><hr class="event-separator" /></div>' +
//	   '</div></div>';
//  }	
	
  
//  if (data.warnings.tag_type) {
//    var event = {
//		title: "Debug version of code",
//		warning: "You are using the debug version of the jsHub code." +
//		  " You are not recommended to use this on a production website.",
//		variables: {}
//	};
//	var eventHtml = render(event);
//	console.log("Rendering " + eventHtml);
//    
//  }
  
  var renderer = new StatusRenderer(data);
  var warnings = renderer.getWarnings();
  
  for (var i = 0; i < warnings.length; i++) {
  	var event = warnings[i];
    // TODO this appends when really we want to prepend
    event.render('event-section-' + panelNumber);
    console.log('New Event added to Panel' + panelNumber);
    // TODO is an changeBodyEvent raised on the parent module when we add this one? This can trigger the Panel title count update
    var count = getNumberOfEventsByPanel(panelNumber);
    setPanelCount(panelNumber, count);
    console.log(count + ' Events now in Panel' + panelNumber);    
  }
}

// security event
function addDatasourceEvent(panelNumber, data) {
  var Dom = YAHOO.util.Dom;
  var newEvent = new YAHOO.widget.Module(Dom.generateId(), { visible: false});
  newEvent.cfg.queueProperty("visible", true);

  // build the HTML template from the data passed in
  <%# use a Ruby partial to create a template string -%>
  templateString = '<%= render :partial => 'event_datasource_item.js.erb', :locals => { 
      :id => "'+Dom.generateId()+'"
    } %>'
  
  newEvent.setBody(templateString);
  
  // TODO this appends when really we want to prepend
  newEvent.render('event-section-'+panelNumber);
  console.log('New Event added to Panel'+panelNumber);
  // TODO is an changeBodyEvent raised on the parent module when we add this one? This can trigger the Panel title count update
  var count = getNumberOfEventsByPanel(panelNumber);
  setPanelCount(panelNumber, count);
  console.log(count+' Events now in Panel'+panelNumber);
}

setState2('success');
updatePanelTitles(eventList);
YAHOO.util.Event.addListener("setPanel1Title", "click", function(){setPanelCount(0,4)} );
YAHOO.util.Event.addListener("setPanel2Title", "click", function(){setPanelCount(1,3)} );
YAHOO.util.Event.addListener("addPanel1Event", "click", function(){addPanelEvent(0)} );
YAHOO.util.Event.addListener("addPanel2Event", "click", function(){addPanelEvent(1)} );


</script>

</body>
</html>
