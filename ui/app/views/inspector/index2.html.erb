<p>This page demonstrates the javascript API of the Inspector</p>

<h2>Security</h2>

<p>Security checking of the javascript file occurs on Inspector load.</p>

<button id="checkJsFileHash">Check jshub JS file</button>

<div id="jshub-outdated">
  jsHub debug script, r2 up-to-date
  <p>
    Status icon: <span class="icon"></span>
  </p>
  <ul></ul>
</div>
    
<script>
  function checkJsFileHash() {

      var node = $('#jshub-outdated') /* where to output the vsible text */, 
          hashcode, 
          // get the url to grab the jshub code from via AJAX
          jshubURL = $("script[src~=jshub]").attr('src');
          
      $.get(jshubURL, function(jshubSrc) {
        hashcode = SHA1(jshubSrc);
        // use a locally cached copy
		// $.getJSON('http://www.jshub.org/tag_configurations/find_by_sha1/' + hashcode + '.js?callback=?', function(data) {
        $.getJSON('<%= javascript_path "jshub/e090e895a3193594e933b9e5782e72eb29f6a3c1.js" %>', function(data) {
          
          node.append("<code>" + data.toSource() + "</code>");
          var list = $('ul', node), icon = $('span.icon', node);
          if (!data.info || !data.warnings || !data.errors) {
            icon.text('Red error icon');
            list.append("<li>Unable to parse response from server</li>");
            return;
          }
          if (data.info.status === "not found") {
            icon.text("Red error icon");
            list.append("<li>Error: tag file was not found. Give a warning that it might have been tampered with.</li>");
            return;
          }
          if (data.info.status === "up to date") {
            icon.text('Green icon');
            list.append("<li>Version up to date and all ok</li>");
          } else if (data.info.status === "out of date") {
            icon.text('Yellow warning icon');
            list.append("<li>Warning, tag out of date but should work ok</li>");
          }
          if (data.warnings.tag_type === "debug") {
            icon.text('Yellow warning icon');
            list.append("<li>Warning, using debug tag. Not advised for a production site.</li>");
          }
          list.append("<li>Tag configuration name: " + data.info.name + "</li>");
          list.append("<li>Tag prepared for site: " + data.info.site + "</li>");
          list.append("<li>Tag last updated: " + $.dateFromISO8601(data.info.updated) + "</li>");
          list.append("<li>Tag configuration url: <a href='" + data.info.url + "'>" + data.info.url + "</a></li>");
          
        });
      });
  }
  
YAHOO.util.Event.addListener("checkJsFileHash", "click", function(){checkJsFileHash()} );
  
</script>

<h2>Setup Inspector</h2>
<p>
<button id="showInspector">Show Inspector</button>
<button id="hideInspector">Hide Inspector</button>
</p>
<script type="text/javascript">
YAHOO.util.Event.addListener("showInspector", "click", function(){jsHub.Inspector.show()});
YAHOO.util.Event.addListener("hideInspector", "click", function(){jsHub.Inspector.hide()});
</script>

<h2>Set display states</h2>
<p>
<button id="setDisplayState1">Set State 1</button>
<button id="setDisplayState2">Set State 2</button>
<button id="setDisplayState3">Set State 3</button>
</p>
<script type="text/javascript">
YAHOO.util.Event.addListener("setDisplayState1", "click", function(){jsHub.Inspector.set_display_state("state1")} );
YAHOO.util.Event.addListener("setDisplayState2", "click", function(){jsHub.Inspector.set_display_state("state2")} );
YAHOO.util.Event.addListener("setDisplayState3", "click", function(){jsHub.Inspector.set_display_state("state3")} );
</script>

<h2>Set icon states</h2>
<p>
<button id="setState2Sucess">Set State 2 Success</button>
<button id="setState2Error">Set State 2 Error</button>
<button id="setState2Warning">Set State 2 Warning</button>
<button id="setState2Info">Set State 2 Info</button>
</p>
<script type="text/javascript">
YAHOO.util.Event.addListener("setState2Sucess", "click", function(){jsHub.Inspector.set_success_state("success")} );
YAHOO.util.Event.addListener("setState2Error", "click", function(){jsHub.Inspector.set_success_state("error")} );
YAHOO.util.Event.addListener("setState2Warning", "click", function(){jsHub.Inspector.set_success_state("warning")} );
YAHOO.util.Event.addListener("setState2Info", "click", function(){jsHub.Inspector.set_success_state("info")} );
</script>

<h2>Simulate event types</h2>
<p>
<button id="addPageEvent">Add a Page Event</button>
<button id="addUserInteractionsEvent">Add a User Interactions Event</button>
</p>
<script type="text/javascript">
// generic event
function addPanelEvent(category_id) {
	
   // complex event
	 var event = {id		    :YAHOO.util.Dom.generateId(),
	              variable	: "DynamicEvent",
                vendor	  : "Causata",
                value		  : "content12",
                help_text : '<p>Causata event.</p><p>DynamicEvent <br /> This refers to ... Aenean quis enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec at justo.</p><p><a href="../docs">View documentation</a></p>'
	};
	
	// simple events
	event = {type:"cart-add",data:{product:123,quantity:2}}	
	jsHub.Inspector.on_hub_event(event);	

	event = {type:"page-view",data:{page:"blah",quantity:2}}	
	jsHub.Inspector.on_hub_event(event);	

}

function addDatasourceEvent(panelNumber, data) {
  var Dom = YAHOO.util.Dom;
  var newEvent = new YAHOO.widget.Module(Dom.generateId(), { visible: false});
  newEvent.cfg.queueProperty("visible", true);
/*
  // build the HTML template from the data passed in
  <%# use a Ruby partial to create a template string -%>
  templateString = '<%= render :partial => 'event_datasource_item.js.erb', :locals => { 
      :id => "'+Dom.generateId()+'"
    } %>'
 */ 
  newEvent.setBody(templateString);
  
  // TODO this appends when really we want to prepend
  newEvent.render('event-section-'+panelNumber);
  console.log('New Event added to Panel'+panelNumber);
  // TODO is an changeBodyEvent raised on the parent module when we add this one? This can trigger the Panel title count update
  var count = getNumberOfEventsByPanel(panelNumber);
  setPanelCount(panelNumber, count);
  console.log(count+' Events now in Panel'+panelNumber);
}

YAHOO.util.Event.addListener("addPageEvent", "click", function(){addPanelEvent("page")} );
YAHOO.util.Event.addListener("addUserInteractionsEvent", "click", function(){addPanelEvent("user-interactions")} );
</script>

    <!-- The jsHub Tag Inspector -->
    <%= stylesheet_link_tag :inspector, :cache => 'cached/inspector' %>
    <%= javascript_include_tag :inspector, :cache => 'cached/inspector' %>
