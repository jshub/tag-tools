<div class="highlight"><pre><span class="c">/*</span>
<span class="c">    http://www.JSON.org/json2.js</span>
<span class="c">    2008-11-19</span>

<span class="c">    Public Domain.</span>

<span class="c">    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.</span>

<span class="c">    See http://www.JSON.org/js.html</span>

<span class="c">    This file creates a global JSON object containing two methods: stringify</span>
<span class="c">    and parse.</span>

<span class="c">        JSON.stringify(value, replacer, space)</span>
<span class="c">            value       any JavaScript value, usually an object or array.</span>

<span class="c">            replacer    an optional parameter that determines how object</span>
<span class="c">                        values are stringified for objects. It can be a</span>
<span class="c">                        function or an array of strings.</span>

<span class="c">            space       an optional parameter that specifies the indentation</span>
<span class="c">                        of nested structures. If it is omitted, the text will</span>
<span class="c">                        be packed without extra whitespace. If it is a number,</span>
<span class="c">                        it will specify the number of spaces to indent at each</span>
<span class="c">                        level. If it is a string (such as &#39;\t&#39; or &#39;&amp;nbsp;&#39;),</span>
<span class="c">                        it contains the characters used to indent at each level.</span>

<span class="c">            This method produces a JSON text from a JavaScript value.</span>

<span class="c">            When an object value is found, if the object contains a toJSON</span>
<span class="c">            method, its toJSON method will be called and the result will be</span>
<span class="c">            stringified. A toJSON method does not serialize: it returns the</span>
<span class="c">            value represented by the name/value pair that should be serialized,</span>
<span class="c">            or undefined if nothing should be serialized. The toJSON method</span>
<span class="c">            will be passed the key associated with the value, and this will be</span>
<span class="c">            bound to the object holding the key.</span>

<span class="c">            For example, this would serialize Dates as ISO strings.</span>

<span class="c">                Date.prototype.toJSON = function (key) {</span>
<span class="c">                    function f(n) {</span>
<span class="c">                        // Format integers to have at least two digits.</span>
<span class="c">                        return n &lt; 10 ? &#39;0&#39; + n : n;</span>
<span class="c">                    }</span>

<span class="c">                    return this.getUTCFullYear()   + &#39;-&#39; +</span>
<span class="c">                         f(this.getUTCMonth() + 1) + &#39;-&#39; +</span>
<span class="c">                         f(this.getUTCDate())      + &#39;T&#39; +</span>
<span class="c">                         f(this.getUTCHours())     + &#39;:&#39; +</span>
<span class="c">                         f(this.getUTCMinutes())   + &#39;:&#39; +</span>
<span class="c">                         f(this.getUTCSeconds())   + &#39;Z&#39;;</span>
<span class="c">                };</span>

<span class="c">            You can provide an optional replacer method. It will be passed the</span>
<span class="c">            key and value of each member, with this bound to the containing</span>
<span class="c">            object. The value that is returned from your method will be</span>
<span class="c">            serialized. If your method returns undefined, then the member will</span>
<span class="c">            be excluded from the serialization.</span>

<span class="c">            If the replacer parameter is an array of strings, then it will be</span>
<span class="c">            used to select the members to be serialized. It filters the results</span>
<span class="c">            such that only members with keys listed in the replacer array are</span>
<span class="c">            stringified.</span>

<span class="c">            Values that do not have JSON representations, such as undefined or</span>
<span class="c">            functions, will not be serialized. Such values in objects will be</span>
<span class="c">            dropped; in arrays they will be replaced with null. You can use</span>
<span class="c">            a replacer function to replace those with JSON values.</span>
<span class="c">            JSON.stringify(undefined) returns undefined.</span>

<span class="c">            The optional space parameter produces a stringification of the</span>
<span class="c">            value that is filled with line breaks and indentation to make it</span>
<span class="c">            easier to read.</span>

<span class="c">            If the space parameter is a non-empty string, then that string will</span>
<span class="c">            be used for indentation. If the space parameter is a number, then</span>
<span class="c">            the indentation will be that many spaces.</span>

<span class="c">            Example:</span>

<span class="c">            text = JSON.stringify([&#39;e&#39;, {pluribus: &#39;unum&#39;}]);</span>
<span class="c">            // text is &#39;[&quot;e&quot;,{&quot;pluribus&quot;:&quot;unum&quot;}]&#39;</span>


<span class="c">            text = JSON.stringify([&#39;e&#39;, {pluribus: &#39;unum&#39;}], null, &#39;\t&#39;);</span>
<span class="c">            // text is &#39;[\n\t&quot;e&quot;,\n\t{\n\t\t&quot;pluribus&quot;: &quot;unum&quot;\n\t}\n]&#39;</span>

<span class="c">            text = JSON.stringify([new Date()], function (key, value) {</span>
<span class="c">                return this[key] instanceof Date ?</span>
<span class="c">                    &#39;Date(&#39; + this[key] + &#39;)&#39; : value;</span>
<span class="c">            });</span>
<span class="c">            // text is &#39;[&quot;Date(---current time---)&quot;]&#39;</span>


<span class="c">        JSON.parse(text, reviver)</span>
<span class="c">            This method parses a JSON text to produce an object or array.</span>
<span class="c">            It can throw a SyntaxError exception.</span>

<span class="c">            The optional reviver parameter is a function that can filter and</span>
<span class="c">            transform the results. It receives each of the keys and values,</span>
<span class="c">            and its return value is used instead of the original value.</span>
<span class="c">            If it returns what it received, then the structure is not modified.</span>
<span class="c">            If it returns undefined then the member is deleted.</span>

<span class="c">            Example:</span>

<span class="c">            // Parse the text. Values that look like ISO date strings will</span>
<span class="c">            // be converted to Date objects.</span>

<span class="c">            myData = JSON.parse(text, function (key, value) {</span>
<span class="c">                var a;</span>
<span class="c">                if (typeof value === &#39;string&#39;) {</span>
<span class="c">                    a =</span>
<span class="c">/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);</span>
<span class="c">                    if (a) {</span>
<span class="c">                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],</span>
<span class="c">                            +a[5], +a[6]));</span>
<span class="c">                    }</span>
<span class="c">                }</span>
<span class="c">                return value;</span>
<span class="c">            });</span>

<span class="c">            myData = JSON.parse(&#39;[&quot;Date(09/09/2001)&quot;]&#39;, function (key, value) {</span>
<span class="c">                var d;</span>
<span class="c">                if (typeof value === &#39;string&#39; &amp;&amp;</span>
<span class="c">                        value.slice(0, 5) === &#39;Date(&#39; &amp;&amp;</span>
<span class="c">                        value.slice(-1) === &#39;)&#39;) {</span>
<span class="c">                    d = new Date(value.slice(5, -1));</span>
<span class="c">                    if (d) {</span>
<span class="c">                        return d;</span>
<span class="c">                    }</span>
<span class="c">                }</span>
<span class="c">                return value;</span>
<span class="c">            });</span>


<span class="c">    This is a reference implementation. You are free to copy, modify, or</span>
<span class="c">    redistribute.</span>

<span class="c">    This code should be minified before deployment.</span>
<span class="c">    See http://javascript.crockford.com/jsmin.html</span>

<span class="c">    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO</span>
<span class="c">    NOT CONTROL.</span>
<span class="c">*/</span>

<span class="c">/*jslint evil: true */</span>

<span class="c">/*global JSON */</span>

<span class="c">/*members &quot;&quot;, &quot;\b&quot;, &quot;\t&quot;, &quot;\n&quot;, &quot;\f&quot;, &quot;\r&quot;, &quot;\&quot;&quot;, JSON, &quot;\\&quot;, apply,</span>
<span class="c">    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,</span>
<span class="c">    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,</span>
<span class="c">    lastIndex, length, parse, prototype, push, replace, slice, stringify,</span>
<span class="c">    test, toJSON, toString, valueOf</span>
<span class="c">*/</span>

<span class="c">// Create a JSON object only if one does not already exist. We create the</span>
<span class="c">// methods in a closure to avoid creating global variables.</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">JSON</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">JSON</span> <span class="o">=</span> <span class="p">{};</span>
<span class="p">}</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

    <span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="c">// Format integers to have at least two digits.</span>
        <span class="k">return</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="o">?</span> <span class="s1">&#39;0&#39;</span> <span class="o">+</span> <span class="nx">n</span> <span class="o">:</span> <span class="nx">n</span><span class="o">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>

        <span class="nb">Date</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>

            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getUTCFullYear</span><span class="p">()</span>   <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span>
                 <span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span>
                 <span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCDate</span><span class="p">())</span>      <span class="o">+</span> <span class="s1">&#39;T&#39;</span> <span class="o">+</span>
                 <span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCHours</span><span class="p">())</span>     <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span>
                 <span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCMinutes</span><span class="p">())</span>   <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span>
                 <span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getUTCSeconds</span><span class="p">())</span>   <span class="o">+</span> <span class="s1">&#39;Z&#39;</span><span class="o">;</span>
        <span class="p">};</span>

        <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span> <span class="o">=</span>
        <span class="nb">Number</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span> <span class="o">=</span>
        <span class="nb">Boolean</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toJSON</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">();</span>
        <span class="p">};</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">cx</span> <span class="o">=</span> <span class="sr">/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span><span class="o">,</span>
        <span class="nx">escapable</span> <span class="o">=</span> <span class="sr">/[\\\&quot;\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span><span class="o">,</span>
        <span class="nx">gap</span><span class="o">,</span>
        <span class="nx">indent</span><span class="o">,</span>
        <span class="nx">meta</span> <span class="o">=</span> <span class="p">{</span>    <span class="c">// table of character substitutions</span>
            <span class="s1">&#39;\b&#39;</span><span class="o">:</span> <span class="s1">&#39;\\b&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\t&#39;</span><span class="o">:</span> <span class="s1">&#39;\\t&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\n&#39;</span><span class="o">:</span> <span class="s1">&#39;\\n&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\f&#39;</span><span class="o">:</span> <span class="s1">&#39;\\f&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\r&#39;</span><span class="o">:</span> <span class="s1">&#39;\\r&#39;</span><span class="o">,</span>
            <span class="s1">&#39;&quot;&#39;</span> <span class="o">:</span> <span class="s1">&#39;\\&quot;&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\\&#39;</span><span class="o">:</span> <span class="s1">&#39;\\\\&#39;</span>
        <span class="p">}</span><span class="o">,</span>
        <span class="nx">rep</span><span class="o">;</span>


    <span class="kd">function</span> <span class="nx">quote</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>

<span class="c">// If the string contains no control characters, no quote characters, and no</span>
<span class="c">// backslash characters, then we can safely slap some quotes around it.</span>
<span class="c">// Otherwise we must also replace the offending characters with safe escape</span>
<span class="c">// sequences.</span>

        <span class="nx">escapable</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">return</span> <span class="nx">escapable</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="o">?</span>
            <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">escapable</span><span class="o">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">meta</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span>
                <span class="k">return</span> <span class="k">typeof</span> <span class="nx">c</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span> <span class="o">?</span> <span class="nx">c</span> <span class="o">:</span>
                    <span class="s1">&#39;\\u&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;0000&#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>
            <span class="p">})</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">:</span>
            <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">string</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">;</span>
    <span class="p">}</span>


    <span class="kd">function</span> <span class="nx">str</span><span class="p">(</span><span class="nx">key</span><span class="o">,</span> <span class="nx">holder</span><span class="p">)</span> <span class="p">{</span>

<span class="c">// Produce a string from holder[key].</span>

        <span class="kd">var</span> <span class="nx">i</span><span class="o">,</span>          <span class="c">// The loop counter.</span>
            <span class="nx">k</span><span class="o">,</span>          <span class="c">// The member key.</span>
            <span class="nx">v</span><span class="o">,</span>          <span class="c">// The member value.</span>
            <span class="nx">length</span><span class="o">,</span>
            <span class="nx">mind</span> <span class="o">=</span> <span class="nx">gap</span><span class="o">,</span>
            <span class="nx">partial</span><span class="o">,</span>
            <span class="nx">value</span> <span class="o">=</span> <span class="nx">holder</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>

<span class="c">// If the value has a toJSON method, call it to obtain a replacement value.</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;&amp;</span>
                <span class="k">typeof</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toJSON</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
        <span class="p">}</span>

<span class="c">// If we were called with a replacer function, then call the replacer to</span>
<span class="c">// obtain a replacement value.</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">rep</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">value</span> <span class="o">=</span> <span class="nx">rep</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">holder</span><span class="o">,</span> <span class="nx">key</span><span class="o">,</span> <span class="nx">value</span><span class="p">);</span>
        <span class="p">}</span>

<span class="c">// What happens next depends on the value&#39;s type.</span>

        <span class="nx">switch</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">case</span> <span class="s1">&#39;string&#39;</span><span class="o">:</span>
            <span class="k">return</span> <span class="nx">quote</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>

        <span class="nx">case</span> <span class="s1">&#39;number&#39;</span><span class="o">:</span>

<span class="c">// JSON numbers must be finite. Encode non-finite numbers as null.</span>

            <span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">?</span> <span class="nb">String</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">:</span> <span class="s1">&#39;null&#39;</span><span class="o">;</span>

        <span class="nx">case</span> <span class="s1">&#39;boolean&#39;</span><span class="o">:</span>
        <span class="nx">case</span> <span class="s1">&#39;null&#39;</span><span class="o">:</span>

<span class="c">// If the value is a boolean or null, convert it to a string. Note:</span>
<span class="c">// typeof null does not produce &#39;null&#39;. The case is included here in</span>
<span class="c">// the remote chance that this gets fixed someday.</span>

            <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>

<span class="c">// If the type is &#39;object&#39;, we might be dealing with an object or an array or</span>
<span class="c">// null.</span>

        <span class="nx">case</span> <span class="s1">&#39;object&#39;</span><span class="o">:</span>

<span class="c">// Due to a specification blunder in ECMAScript, typeof null is &#39;object&#39;,</span>
<span class="c">// so watch out for that case.</span>

            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="s1">&#39;null&#39;</span><span class="o">;</span>
            <span class="p">}</span>

<span class="c">// Make an array to hold the partial results of stringifying this object value.</span>

            <span class="nx">gap</span> <span class="o">+=</span> <span class="nx">indent</span><span class="o">;</span>
            <span class="nx">partial</span> <span class="o">=</span> <span class="p">[];</span>

<span class="c">// Is the value an array?</span>

            <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span><span class="p">)</span> <span class="p">{</span>

<span class="c">// The value is an array. Stringify every element. Use null as a placeholder</span>
<span class="c">// for non-JSON values.</span>

                <span class="nx">length</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">partial</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">str</span><span class="p">(</span><span class="nx">i</span><span class="o">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;null&#39;</span><span class="o">;</span>
                <span class="p">}</span>

<span class="c">// Join all of the elements together, separated with commas, and wrap them in</span>
<span class="c">// brackets.</span>

                <span class="nx">v</span> <span class="o">=</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;[]&#39;</span> <span class="o">:</span>
                    <span class="nx">gap</span> <span class="o">?</span> <span class="s1">&#39;[\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span> <span class="o">+</span>
                            <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span>
                                <span class="nx">mind</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span> <span class="o">:</span>
                          <span class="s1">&#39;[&#39;</span> <span class="o">+</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span><span class="o">;</span>
                <span class="nx">gap</span> <span class="o">=</span> <span class="nx">mind</span><span class="o">;</span>
                <span class="k">return</span> <span class="nx">v</span><span class="o">;</span>
            <span class="p">}</span>

<span class="c">// If the replacer is an array, use it to select the members to be stringified.</span>

            <span class="k">if</span> <span class="p">(</span><span class="nx">rep</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">rep</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">length</span> <span class="o">=</span> <span class="nx">rep</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">k</span> <span class="o">=</span> <span class="nx">rep</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">k</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">v</span> <span class="o">=</span> <span class="nx">str</span><span class="p">(</span><span class="nx">k</span><span class="o">,</span> <span class="nx">value</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">partial</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">quote</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">gap</span> <span class="o">?</span> <span class="s1">&#39;: &#39;</span> <span class="o">:</span> <span class="s1">&#39;:&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">v</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

<span class="c">// Otherwise, iterate through all of the keys in the object.</span>

                <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">value</span><span class="o">,</span> <span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
                        <span class="nx">v</span> <span class="o">=</span> <span class="nx">str</span><span class="p">(</span><span class="nx">k</span><span class="o">,</span> <span class="nx">value</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">partial</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">quote</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">gap</span> <span class="o">?</span> <span class="s1">&#39;: &#39;</span> <span class="o">:</span> <span class="s1">&#39;:&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">v</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>

<span class="c">// Join all of the member texts together, separated with commas,</span>
<span class="c">// and wrap them in braces.</span>

            <span class="nx">v</span> <span class="o">=</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;{}&#39;</span> <span class="o">:</span>
                <span class="nx">gap</span> <span class="o">?</span> <span class="s1">&#39;{\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span> <span class="o">+</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span>
                        <span class="nx">mind</span> <span class="o">+</span> <span class="s1">&#39;}&#39;</span> <span class="o">:</span> <span class="s1">&#39;{&#39;</span> <span class="o">+</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;}&#39;</span><span class="o">;</span>
            <span class="nx">gap</span> <span class="o">=</span> <span class="nx">mind</span><span class="o">;</span>
            <span class="k">return</span> <span class="nx">v</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="c">// If the JSON object does not yet have a stringify method, give it one.</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="o">,</span> <span class="nx">replacer</span><span class="o">,</span> <span class="nx">space</span><span class="p">)</span> <span class="p">{</span>

<span class="c">// The stringify method takes a value and an optional replacer, and an optional</span>
<span class="c">// space parameter, and returns a JSON text. The replacer can be a function</span>
<span class="c">// that can replace values, or an array of strings that will select the keys.</span>
<span class="c">// A default replacer method can be provided. Use of the space parameter can</span>
<span class="c">// produce text that is more easily readable.</span>

            <span class="kd">var</span> <span class="nx">i</span><span class="o">;</span>
            <span class="nx">gap</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
            <span class="nx">indent</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>

<span class="c">// If the space parameter is a number, make an indent string containing that</span>
<span class="c">// many spaces.</span>

            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">space</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">space</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">indent</span> <span class="o">+=</span> <span class="s1">&#39; &#39;</span><span class="o">;</span>
                <span class="p">}</span>

<span class="c">// If the space parameter is a string, it will be used as the indent string.</span>

            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">space</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">indent</span> <span class="o">=</span> <span class="nx">space</span><span class="o">;</span>
            <span class="p">}</span>

<span class="c">// If there is a replacer, it must be a function or an array.</span>
<span class="c">// Otherwise, throw an error.</span>

            <span class="nx">rep</span> <span class="o">=</span> <span class="nx">replacer</span><span class="o">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">replacer</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">replacer</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span>
                    <span class="p">(</span><span class="k">typeof</span> <span class="nx">replacer</span> <span class="o">!==</span> <span class="s1">&#39;object&#39;</span> <span class="o">||</span>
                     <span class="k">typeof</span> <span class="nx">replacer</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="s1">&#39;number&#39;</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;JSON.stringify&#39;</span><span class="p">);</span>
            <span class="p">}</span>

<span class="c">// Make a fake root object containing our value under the key of &#39;&#39;.</span>
<span class="c">// Return the result of stringifying the value.</span>

            <span class="k">return</span> <span class="nx">str</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="p">{</span><span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="nx">value</span><span class="p">});</span>
        <span class="p">};</span>
    <span class="p">}</span>


<span class="c">// If the JSON object does not yet have a parse method, give it one.</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="o">,</span> <span class="nx">reviver</span><span class="p">)</span> <span class="p">{</span>

<span class="c">// The parse method takes a text and an optional reviver function, and returns</span>
<span class="c">// a JavaScript value if the text is a valid JSON text.</span>

            <span class="kd">var</span> <span class="nx">j</span><span class="o">;</span>

            <span class="kd">function</span> <span class="nx">walk</span><span class="p">(</span><span class="nx">holder</span><span class="o">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>

<span class="c">// The walk method is used to recursively walk the resulting structure so</span>
<span class="c">// that modifications can be made.</span>

                <span class="kd">var</span> <span class="nx">k</span><span class="o">,</span> <span class="nx">v</span><span class="o">,</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">holder</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">value</span><span class="o">,</span> <span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
                            <span class="nx">v</span> <span class="o">=</span> <span class="nx">walk</span><span class="p">(</span><span class="nx">value</span><span class="o">,</span> <span class="nx">k</span><span class="p">);</span>
                            <span class="k">if</span> <span class="p">(</span><span class="nx">v</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                                <span class="nx">value</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                                <span class="nx">delete</span> <span class="nx">value</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nx">reviver</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">holder</span><span class="o">,</span> <span class="nx">key</span><span class="o">,</span> <span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>


<span class="c">// Parsing happens in four stages. In the first stage, we replace certain</span>
<span class="c">// Unicode characters with escape sequences. JavaScript handles many characters</span>
<span class="c">// incorrectly, either silently deleting them, or treating them as line endings.</span>

            <span class="nx">cx</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">cx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">cx</span><span class="o">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="s1">&#39;\\u&#39;</span> <span class="o">+</span>
                        <span class="p">(</span><span class="s1">&#39;0000&#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>
                <span class="p">});</span>
            <span class="p">}</span>

<span class="c">// In the second stage, we run the text against regular expressions that look</span>
<span class="c">// for non-JSON patterns. We are especially concerned with &#39;()&#39; and &#39;new&#39;</span>
<span class="c">// because they can cause invocation, and &#39;=&#39; because it can cause mutation.</span>
<span class="c">// But just to be safe, we want to reject all unexpected forms.</span>

<span class="c">// We split the second stage into 4 regexp operations in order to work around</span>
<span class="c">// crippling inefficiencies in IE&#39;s and Safari&#39;s regexp engines. First we</span>
<span class="c">// replace the JSON backslash pairs with &#39;@&#39; (a non-JSON character). Second, we</span>
<span class="c">// replace all simple value tokens with &#39;]&#39; characters. Third, we delete all</span>
<span class="c">// open brackets that follow a colon or comma or that begin the text. Finally,</span>
<span class="c">// we look to see that the remaining characters are only whitespace or &#39;]&#39; or</span>
<span class="c">// &#39;,&#39; or &#39;:&#39; or &#39;{&#39; or &#39;}&#39;. If that is so, then the text is safe for eval.</span>

            <span class="k">if</span> <span class="p">(</span><span class="sr">/^[\],:{}\s]*$/</span><span class="p">.</span>
<span class="nx">test</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\\(?:[&quot;\\\/bfnrt]|u[0-9a-fA-F]{4})/g</span><span class="o">,</span> <span class="s1">&#39;@&#39;</span><span class="p">).</span>
<span class="nx">replace</span><span class="p">(</span><span class="sr">/&quot;[^&quot;\\\n\r]*&quot;|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g</span><span class="o">,</span> <span class="s1">&#39;]&#39;</span><span class="p">).</span>
<span class="nx">replace</span><span class="p">(</span><span class="sr">/(?:^|:|,)(?:\s*\[)+/g</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="p">)))</span> <span class="p">{</span>

<span class="c">// In the third stage we use the eval function to compile the text into a</span>
<span class="c">// JavaScript structure. The &#39;{&#39; operator is subject to a syntactic ambiguity</span>
<span class="c">// in JavaScript: it can begin a block or an object literal. We wrap the text</span>
<span class="c">// in parens to eliminate the ambiguity.</span>

                <span class="nx">j</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="nx">text</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">);</span>

<span class="c">// In the optional fourth stage, we recursively walk the new structure, passing</span>
<span class="c">// each name/value pair to a reviver function for possible transformation.</span>

                <span class="k">return</span> <span class="k">typeof</span> <span class="nx">reviver</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">?</span>
                    <span class="nx">walk</span><span class="p">({</span><span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="nx">j</span><span class="p">}</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">j</span><span class="o">;</span>
            <span class="p">}</span>

<span class="c">// If the text is not JSON parseable, then a SyntaxError is thrown.</span>

            <span class="k">throw</span> <span class="k">new</span> <span class="nx">SyntaxError</span><span class="p">(</span><span class="s1">&#39;JSON.parse&#39;</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">})();</span>
</pre></div>
