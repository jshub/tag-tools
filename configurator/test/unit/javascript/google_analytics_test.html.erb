<% set_title "Google Analytics markup < Data capture" %>

<% content_for :javascripts do %>  
  <%= javascript_include_tag "/js/src/data-capture/hPage-plugin.js" %>
  <%= javascript_include_tag "/js/src/data-capture/google-analytics-markup-plugin.js" %>

  <script type="text/javascript">
  // fake GA tracker
  window._gat = {
    _getTracker: function() {
      return {
        _trackPageview: function() {
        }
      };
    }
  }
  
  window.domReadyFired = false;
  
  $(document).ready(function () {
  	window.domReadyFired = true;
  })
  </script>
<% end %>

<% content_for :intro do %>
<p>
  This file tests <strong><a href="https://intra.causata.com/code/causata/wiki/JavascriptTag/DataCapture/GoogleAnalyticsMarkup" title="Google Analytics">Google Analytics markup plugin</a> functionality</strong>.
</p>
<p>
  This page tests the logic for extracting values from the html of the page.
</p>
<% end %>


<!-- Any HTML you may require for your tests to work properly -->
<div id="example1">
  <h3>Example 1: no	explicit page name</h3>
  <p>The google tag will record the page URL</p>
  <script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    // document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
    var pageTracker = _gat._getTracker("UA-8152756-1");
    pageTracker._trackPageview();
  </script>
</div>

<div id="example2">
  <h3>Example 2: explicit page name</h3>
  <p>The google tag will record the name "Test page"</p>
  <script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    // document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
    var pageTracker = _gat._getTracker("UA-8152756-1");
    pageTracker._trackPageview("Test page");
  </script>
</div>

<div id="example3">
  <h3>Example 3: error with duplicate page name</h3>
  <p class="hpage">
  	The microformat contains the page name "<span class="name">new name</span>".
  </p>
  <p>
  	The google tag will record the name "Test page".
    This should throw a warning event that the inspector can detect.
  </p>
  <script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    // document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
    var pageTracker = _gat._getTracker("UA-8152756-1");
    pageTracker._trackPageview("Test page");
  </script>
</div>

<div id="example4">
  <h3>Example 4: javascript mediated event</h3>
  <p>
  	The text contains a <a href="#" onclick="clickHandlersTriggered=true; pageTracker._trackPageview('Link click');">link
	with tracking</a>, when it is clicked it should be recorded by GA.
  </p>
</div>

<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other
   * supporting functionality to avoid false test failure results due to
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({
    name: "Environment check",
    
    "test required test dependencies": function() {
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
    
    "test jsHub API dependencies": function() {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  /* 
   * Capture the values of the page-view event
   */
  suite.parse = function(selector) {
    var data = null, count = 0;
    jsHub.bind("page-view", "unittest", function(evt) {
      data = evt.data;
      count++;
    });
    jsHub.trigger("page-view", {
      context: selector
    });
    Y.Assert.areEqual(1, count, 'wrong number of page view events have been generated');
	return data;
  };
  

  suite.add(new Y.Test.Case({
    name: "Capture default (non-specified) page name",
    
    "test pagename not specified": function() {
      var data = suite.parse("#example1");
      Y.Assert.areEqual(window.location.pathname, data.name, 'Page name should default to the window.location.pathname if it is not explicitly stated');
    },
	
	// unlike hpage plugin the GA plugin defaults to pathname rather than leaving it blank, so it
	// should explicitly state the source
    "test source metadata is applied to default fields": function() {
      var data = suite.parse("#example1");
      Y.Assert.areEqual('location.pathname', data['name-source'], 'name-source is not correct');
    }
  }));
  
  suite.add(new Y.Test.Case({
    name: "Capture explicit values",
    
    "test pagename explicitly specified": function() {
      var data = suite.parse("#example2");
      Y.Assert.areEqual("Test page", data.name, 'Page name should match the defined value');
    },
	
    "test source metadata is applied to explicit fields": function() {
      var data = suite.parse("#example2");
	  var pluginId = 'google-analytics-markup';
      Y.Assert.areEqual(pluginId, data['name-source'], 'name-source is not correct');
    }
  }));
  
  suite.add(new Y.Test.Case({
    name: "Check error messages",
    
    "test error thrown for duplicate values": function() {
      var errorData = null, errors = 0;
      jsHub.bind("duplicate-value-warning", "unittest", function(evt) {
        errorData = evt.data;
        errors++;
      });
      
      var data = suite.parse("#example3");
      Y.Assert.areEqual(1, errors, 'Expected to get a warning about duplicate values');
      Y.Assert.areEqual("new name", errorData.fields.name.previous.value, 'Wrong value in error event from previous plugin');
      Y.Assert.areEqual("hPage-plugin", errorData.fields.name.previous.source, 'Wrong previous plugin source');
      Y.Assert.areEqual("Test page", errorData.fields.name.found, 'Wrong value in error event from GA plugin');
      // and check the real page view event
	  Y.Assert.areEqual("Test page", data.name, 'Page name should contain the last defined value');
    }
  }));
  
  suite.add(new Y.Test.Case({
    name: "Check post-load events",
    
    "test instrumented links": function() {
      window.clickHandlersTriggered = false;
	  console.log("page tracker is "+pageTracker.toSource());
	  console.log("_gat is "+_gat.toSource());
	  var data, events = 0;
      jsHub.bind("page-view", "unittest", function(evt) {
        data = evt.data;
        events++;
      });
      
      $('#example4 a').click();
	  
      // see https://intra.causata.com/code/causata/ticket/411
	  // can't run this test in Rhino as $(document).ready() has not fired
	  if (window.domReadyFired) {
        Y.Assert.isTrue(window.clickHandlersTriggered, "The onClick handler was not triggered");
        Y.Assert.areEqual(1, events, 'Click should be recorded');
        Y.Assert.areEqual("Link click", data.name, 'Wrong page name in event');
      }
	  
    }
  }));
  
</script>
